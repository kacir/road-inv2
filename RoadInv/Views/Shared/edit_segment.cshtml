@using RoadInv.DB
@using RoadInv.Models
@model SegmentDetailPageModel
@{Layout = "_Layout.cshtml";}
@{
    ViewData["Title"] = "Edit Segment";
}
<link href="~/css/micromodal.css" rel="stylesheet">
<script src="https://unpkg.com/micromodal/dist/micromodal.min.js"></script>
<style>
    .arrow-button{
        font-size: 75px;
        width: 100px;
        border-radius: 50px;
        border-style: solid;
        background-color: grey;
        color: white;
    }
    .segment-title{
        width: 50%;
    }

    .segment-title-holder{
        display: flex;
        align-content: center;
        margin: auto;
    }

</style>

<!-- modal window appears after record has been deleted. is only shown for 2 seconds.-->
<div class="modal micromodal-slide" id="modal-delete" aria-hidden="true">
    <div class="modal__overlay" tabindex="-1" data-micromodal-close>
        <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="modal-1-title">
            <header class="modal__header">
                <h2 id="modal-1-title">
                    Record has been deleted
                </h2>
            </header>
            <main class="modal__content" id="modal-1-content">
                <p>
                    re-directing you to main screen.
                </p>
            </main>
        </div>
    </div>
</div>


<!-- modal window appears on click when records have to be mirrored-->
<div class="modal micromodal-slide" id="modal-1" aria-hidden="true">
    <div class="modal__overlay" tabindex="-1" data-micromodal-close>
        <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="modal-1-title">
            <header class="modal__header">
                <h2 id="modal-1-title">
                    Mirror Duplicate Segment
                </h2>
            </header>
            <main class="modal__content" id="modal-1-content">
                <p>
                    Please choose modify the following core attributes to continue to mirror process
                </p>
                <form>
                    <div class="modal-form-group">
                        <label for="m-@FieldsListModel.AH_County">County:</label>
                        <select id="m-@FieldsListModel.AH_County" class="form-control">
                            <option></option>
                            @foreach (ConstaintCounty item in Model.con.AH_County)
                            {
                                <option @if (Model.details.AhCounty == item.CountyNumber) { <text> selected</text> } value="@item.CountyNumber">@item.CountyNumber - @item.County</option>

                            }
                        </select>
                    </div>
                    <div class="modal-form-group">
                        <label for="m-@FieldsListModel.AH_Route">Route:</label>
                        <input id="m-@FieldsListModel.AH_Route" value="@Model.details.AhRoute" class="form-control" />
                    </div>
                    <div class="modal-form-group">
                        <label for="m-@FieldsListModel.AH_Section">Section:</label>
                        <input id="m-@FieldsListModel.AH_Section" value="@Model.details.AhSection" class="form-control"/>
                    </div>
                    <div class="modal-form-group">
                        <label for="m-@FieldsListModel.LOG_DIRECT">Direction:</label>
                        <span id="m-@FieldsListModel.LOG_DIRECT" class="form-control">
                            @if (Model.details.LogDirect == "A")
                            {
                                <text>B</text>
                            }
                            else if (Model.details.LogDirect == "B")
                            {
                                <text>A</text>
                            }
                        </span>
                    </div>
                    <div class="modal-form-group">
                        <label for="m-@FieldsListModel.AH_BLM">BLM:</label>
                        <input id="m-@FieldsListModel.AH_BLM" value="@Model.details.AhBlm" class="form-control" />
                    </div>
                    <div class="modal-form-group">
                        <label for="m-@FieldsListModel.AH_ELM">ELM:</label>
                        <input id="m-@FieldsListModel.AH_ELM" value="@Model.details.AhElm" class="form-control" />
                    </div>

                </form>
            </main>
            <footer class="modal__footer">
                <button id="continue-mirror" class="segment-button">Continue Mirror</button>
                <button class="segment-button" data-micromodal-close aria-label="Close this dialog window">Cancel</button>
            </footer>
        </div>
    </div>
</div>

<!--window needed to copy an entire segment -->
<div class="modal micromodal-slide" id="modal-2" aria-hidden="true">
    <div class="modal__overlay" tabindex="-1" data-micromodal-close>
        <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="modal-1-title">
            <header class="modal__header">
                <h2 id="modal-1-title">
                    Duplicate Segment
                </h2>
            </header>
            <main class="modal__content" id="modal-1-content">
                <form>
                    <div class="modal-form-group">
                        <label for="d-@FieldsListModel.AH_County">County:</label>
                        <select id="d-@FieldsListModel.AH_County" class="form-control">
                            <option></option>
                            @foreach (ConstaintCounty item in Model.con.AH_County)
                            {
                                <option @if (Model.details.AhCounty == item.CountyNumber) { <text> selected</text> } value="@item.CountyNumber">@item.CountyNumber - @item.County</option>

                            }
                        </select>
                    </div>
                    <div class="modal-form-group">
                        <label for="d-@FieldsListModel.AH_Route">Route:</label>
                        <input id="d-@FieldsListModel.AH_Route" value="@Model.details.AhRoute" class="form-control" />
                    </div>
                    <div class="modal-form-group">
                        <label for="d-@FieldsListModel.AH_Section">Section:</label>
                        <input id="d-@FieldsListModel.AH_Section" value="@Model.details.AhSection" class="form-control" />
                    </div>
                    <div class="modal-form-group">
                        <label for="d-@FieldsListModel.LOG_DIRECT">Direction:</label>
                        <select id="d-@FieldsListModel.LOG_DIRECT" data="@Model.details.LogDirect">
                            <option></option>
                            @foreach (var item in Model.con.LOG_DIRECT)
                            {
                                <option @if (Model.details.LogDirect == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            }
                        </select>
                    </div>
                    <div class="modal-form-group">
                        <label for="d-@FieldsListModel.AH_BLM">BLM:</label>
                        <input id="d-@FieldsListModel.AH_BLM" value="@Model.details.AhBlm" class="form-control" />
                    </div>
                    <div class="modal-form-group">
                        <label for="d-@FieldsListModel.AH_ELM">ELM:</label>
                        <input id="d-@FieldsListModel.AH_ELM" value="@Model.details.AhElm" class="form-control" />
                    </div>

                </form>
            </main>
            <footer class="modal__footer">
                <button id="continue-duplicate" class="segment-button">Continue Duplicate</button>
                <button class="segment-button" data-micromodal-close aria-label="Close this dialog window">Cancel</button>
            </footer>
        </div>
    </div>
</div>

<!-- method needs to be run in order for modal windows to function. Must be called after the modal window HTML is built -->
<script>
    MicroModal.init();
</script>

<!-- page title -->
<div class="segment-title-holder">
    <button id="left-arrow" class="arrow-button">&#x2190;</button>
    <div class="segment-title ">
        <h1 id="header" data="@Model.details.Id">
            @if (Model.editStatus == SegmentDetailPageModel.newSegment)
            {
                <text>New Segment</text>
            }
            else if (Model.editStatus == SegmentDetailPageModel.mirrorSegment)
            {
                <text>Mirrored Segment</text>
            }
            else if (Model.editStatus == SegmentDetailPageModel.duplicateSegment)
            {
                <text>Duplicate Segment</text>
            }
            else
            {
                <text>Road Segment</text>
            }
            <span class="@FieldsListModel.AH_RoadID">@Model.details.AhRoadId </span>
            <br> BLM:
            <span class="@FieldsListModel.AH_BLM">@Model.details.AhBlm</span> - ELM
            <span class="@FieldsListModel.AH_ELM">@Model.details.AhElm</span>
        </h1>
    </div>
    <button id="right-arrow" class="arrow-button">&#8594;</button>
</div>

<!-- body of the HTML -->
<div class="main-content">
    <div class="master-grid">
        <div id="box-coreChar" class='property-box'>
            <h6>  Core Characteristics</h6>
            <div class=grid-container>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="ArDOT District">Distict</label>
                    <select id="@FieldsListModel.AH_District" data="@Model.details.AhDistrict">
                        <option></option>
                        @{
                            var codeIncludedDistrict = false;
                            @foreach (ConstaintDistrict item in Model.con.AH_District)
                            {
                                <option @if (Model.details.AhDistrict == item.DistrictNumber) { <text>selected</text> } value="@item.DistrictNumber">@item.DistrictNumber</option>
                            if (Model.details.AhDistrict == item.DistrictNumber)
                                {
                                    codeIncludedDistrict = true;
                                }
                            }
                            if (codeIncludedDistrict == false & Model.details.AhDistrict != "" & !(Model.details.AhDistrict is null))
                            {
                                <option selected value="@Model.details.AhDistrict">@Model.details.AhDistrict - Invalid </option>
                            }

                        }

                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="ArDOT County Number. Not to be confused with FHWA County Numbers.">County</label>
                    <select id="@FieldsListModel.AH_County" data="@Model.details.AhCounty">

                        <option></option>
                        @{
                            var codeIncludedCounty = false;
                            @foreach (ConstaintCounty item in Model.con.AH_County)
                            {
                                <option @if (Model.details.AhCounty == item.CountyNumber) { <text> selected</text> } value="@item.CountyNumber">@item.CountyNumber - @item.County</option>
                            if (Model.details.AhCounty == item.CountyNumber)
                                {
                                    codeIncludedCounty = true;
                                }
                            }

                            if (codeIncludedCounty == false & Model.details.AhCounty != "" & !(Model.details.AhCounty is null)){
                                <option selected value="@Model.details.AhCounty">@Model.details.AhCounty - Invalid</option>
                            }
                        }

                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="ARNOLD compliant Route Name. limited to 150 characters and only be alphnumberic characters">
                    Route</label>
                    <input id="@FieldsListModel.AH_Route" type="text" value="@Model.details.AhRoute" data="@Model.details.AhRoute" />
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="ARNOLD section number. 3 digit sections are typically reserved for Y leg segments">Section</label>
                    <input id="@FieldsListModel.AH_Section" type="text" value="@Model.details.AhSection" data="@Model.details.AhSection" />
                </div>
                <div >
                    <span data-toggle="tooltip" data-placement="top" title="A character prefix for the section that identifies a characteristic of 
                          the road such as one way cuplet. Rarely used">Section Code:</span> 
                    <br /> 
                    <span data-placement="top"  data-toggle="tooltip" id="@FieldsListModel.SectionCode" data="">XXXXX</span>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="The log direction of the road. Most roads are log direction with anti-log roads being part of dual carrageways">Direction</label>
                    <select id="@FieldsListModel.LOG_DIRECT" data="@Model.details.LogDirect">
                        <option></option>
                        @{
                            var codeIncludedLogDirection = false;
                            @foreach (var item in Model.con.LOG_DIRECT)
                            {
                            <option @if (Model.details.LogDirect == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.LogDirect == item.Domainvalue)   {
                                    codeIncludedLogDirection = true;
                            }
                            }

                            if (codeIncludedLogDirection == false & Model.details.LogDirect != "" & !(Model.details.LogDirect is null))
                            {
                                <option selected value="@Model.details.LogDirect">@Model.details.LogDirect - Invalid </option>
                            }
                            
                        }

                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="The Begining Log Mile of the segment">BLM</label>
                    <input id="@FieldsListModel.AH_BLM" data="@Model.details.AhBlm" type="text" value="@Model.details.AhBlm" />
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="The ending Log Mile of the segment">ELM</label>
                    <input id="@FieldsListModel.AH_ELM" data="@Model.details.AhElm" type="text" value="@Model.details.AhElm" />
                </div>
                <div>
                    <span>Road Length <br /><span id="@FieldsListModel.AH_Length">@Model.details.AhLength</span></span>
                </div>

            </div>
        </div>
        <div id="box-history" class='property-box'>
            <h6>History</h6>
            <DIV>
                input
                <input type="text" />
            </DIV>
        </div>
    </div>


    <div class="master-grid">
        <div id="box-nest">
            <div class="master-grid">
                <div class="property-box">
                    <h6>Classification Properties</h6>
                    <div class="grid-container">
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="The Route Sign designation of the Segment. County and City designations are dependent 
                                   on the municipal boundary rather than the managment or ownership of the road">Route Sign</label>
                            <select id="@FieldsListModel.RouteSign" data="@Model.details.RouteSign">
                                <option></option>
                                @{
                                    var codeIncludedRouteSign = false;
                                    @foreach (var item in Model.con.RouteSign)
                                    {
                                    <option @if (Model.details.RouteSign == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                                    if (Model.details.RouteSign == item.Domainvalue)
                                        {
                                            codeIncludedRouteSign = true;
                                        }
                                    }

                                    if (codeIncludedRouteSign == false & Model.details.RouteSign != "" & !(Model.details.RouteSign is null))
                                    {
                                        <option selected value="@Model.details.RouteSign">@Model.details.RouteSign - Invalid </option>
                                    }

                                }

                            </select>
                        </div>
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="Indicates based on its function in the vacinity">Type Road</label>
                            <select id="@FieldsListModel.TypeRoad" data="@Model.details.TypeRoad">
                                <option></option>
                                @{
                                    var codeIncludedTypeRoad = false;
                                    @foreach (var item in Model.con.TypeRoad)
                                    {
                                    <option @if (Model.details.TypeRoad == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label </option>
                                    if (Model.details.TypeRoad == item.Domainvalue){
                                            codeIncludedTypeRoad = true;
                                    }    
                                }

                                    if (codeIncludedTypeRoad == false & Model.details.TypeRoad != "" & !(Model.details.TypeRoad is null))
                                    {
                                        <option selected value="@Model.details.TypeRoad">@Model.details.TypeRoad - Invalid</option>
                                    }
                                }

                            </select>
                        </div>
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="Indicates if the Segment in located inside of an ajusted urbanized area boundary">Rural Urban Area</label>
                            <select id="@FieldsListModel.RuralUrbanArea" data="@Model.details.RuralUrbanArea">
                                <option></option>
                                @foreach (var item in Model.con.RuralUrbanArea)
                                {
                                    <option @if (Model.details.RuralUrbanArea == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.ValueDescription</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="Dicates which census urbanized area of Segment is part of. Default is 0000 for not in a designated area">Urban Code</label>
                            <select id="@FieldsListModel.UrbanAreaCode" data="@Model.details.UrbanAreaCode">
                                @{
                                    var codeIncludedUrbanCode = false;
                                    foreach (var item in Model.con.UrbanAreaCode)
                                    {
                                        <option @if (Model.details.UrbanAreaCode == item.UrbanCode) { <text> selected</text> } value="@item.UrbanCode">@item.UrbanCode - @item.Name</option>
                                        if (Model.details.UrbanAreaCode == item.UrbanCode)
                                        {
                                            codeIncludedUrbanCode = true;
                                        }
                                    }
                                    if (codeIncludedUrbanCode == false)
                                    {
                                        <option selected value="@Model.details.UrbanAreaCode"> @Model.details.UrbanAreaCode" - Invalid Code</option>
                                    }
                                }
                            </select>
                        </div>

                    </div>
                </div>
                <div id="box-shoulder" class="property-box">
                    <h6>Shoulder Properties</h6>
                    <div class="grid-container">
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="width of the left road shoulder. Does not include bike lanes or sidewalks">Left Shoulder <br /> Width</label>
                            <input id="@FieldsListModel.LeftShoulderWidth" data="@Model.details.LeftShoulderWidth" type="text" value="@Model.details.LeftShoulderWidth"/>
                        </div>
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="The predominant surface type of the road shoulder. Does not include bike lanes or sidewalks">Left Shoulder <br /> Surface</label>
                            <select id="@FieldsListModel.LeftShoulderSurface" data="@Model.details.LeftShoulderSurface">
                                <option></option>
                                @{
                                    var codeIncludedLeftShoulderSurface = false;
                                    @foreach (var item in Model.con.ShoulderSurface)
                                {
                                    <option @if (Model.details.LeftShoulderSurface == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                                    if (Model.details.LeftShoulderSurface == item.Domainvalue)
                                        {
                                            codeIncludedLeftShoulderSurface = true;
                                        }
                                }
                                    if (codeIncludedLeftShoulderSurface == false)
                                    {
                                        <option selected value="@Model.details.LeftShoulderSurface"> @Model.details.LeftShoulderSurface - invalid </option>
                                    }
                                }

                            </select>
                        </div>
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="width of the right road shoulder. Does not include bike lanes or sidewalks">Right Shoulder <br /> Width</label>
                            <input data="@Model.details.RightShoulderWidth" type="text" id="@FieldsListModel.RightShoulderWidth" value="@Model.details.RightShoulderWidth" />
                        </div>
                        <div>
                            <label data-toggle="tooltip" data-placement="top" title="The predominant surface type of the road shoulder. Does not include bike lanes or sidewalks">Right Shoulder <br /> Surface</label>
                            <select data="@Model.details.RightShoulderSurface" id="@FieldsListModel.RightShoulderSurface">
                                <option></option>
                                @{
                                    var codeIncludedRightShoulderSurface = false;
                                                                    @foreach (var item in Model.con.ShoulderSurface)
                                {
                                    <option @if (Model.details.RightShoulderSurface == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                                    if (Model.details.RightShoulderSurface == item.Domainvalue)
                                        {
                                            codeIncludedRightShoulderSurface = true;
                                        }
                                }
                                    if (codeIncludedRightShoulderSurface == false)
                                    {
                                        <option selected value="@Model.details.RightShoulderSurface"> @Model.details.RightShoulderSurface - invalid</option>
                                    }
                                }

                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="box-physical" class="property-box">
            <h6>Physical Properties</h6>
            <div class="grid-container">
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="The predominant surface type for the road">Surface <br /> Type</label>
                    <select data="@Model.details.SurfaceType" id="@FieldsListModel.SurfaceType">
                        <option></option>
                        @{
                            var codeIncludedSurfaceType = false;
                            foreach (var item in Model.con.SurfaceType)
                        {
                            <option @if (Model.details.SurfaceType == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.ValueDescription</option>
                            if (Model.details.SurfaceType == item.Domainvalue)
                                {
                                    codeIncludedSurfaceType = true;
                                }
                        }
                            if (codeIncludedSurfaceType == false & Model.details.SurfaceType != "" & !(Model.details.SurfaceType is null))
                            {
                                <option selected value="@Model.details.SurfaceType"> @Model.details.SurfaceType - invalid</option>
                            }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="The predominant lane width the road. Must be a whole number">Lane <br /> Width</label>
                    <input id="@FieldsListModel.LaneWidth" type="text" data="@Model.details.LaneWidth" value="@Model.details.LaneWidth">
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="non-thu traffic lanes like turn lanes">Extra <br /> Lanes</label>
                    <select data="@Model.details.ExtraLanes" id="@FieldsListModel.ExtraLanes">
                        <option></option>
                        @{
                            var codeIncludedExtraLanes = false;
                            @foreach (var item in Model.con.ExtraLanes)
                            {
                                <option @if (Model.details.ExtraLanes == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                                if (Model.details.ExtraLanes == item.Domainvalue)
                                {
                                    codeIncludedExtraLanes = true;
                                }
                            }
                            if (codeIncludedExtraLanes == false){
                                <option selected value="@Model.details.ExtraLanes">@Model.details.ExtraLanes - invalid</option>
                            }
                        }

                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="The year the road was constructed or added to the state highway system">Year <br /> Built</label>
                    <input id="@FieldsListModel.YearBuilt" data="@Model.details.YearBuilt" value="@Model.details.YearBuilt" />
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Year the road was last reconstructed. Normally refers to the last overlay.">Year <br /> Recon</label>
                    <input id="@FieldsListModel.yearRecon" data="@Model.details.YearRecon"  value="@Model.details.YearRecon" />
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Width of the surface">Surface <br /> Width</label>
                    <input id="@FieldsListModel.SurfaceWidth" type="text" data="@Model.details.SurfaceWidth" value="@Model.details.SurfaceWidth">
                </div>
            </div>
            <div class="grid-container">
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Indicates the operation of a road, ex: one-way, two-way, divided, etc…">Type <br /> Operation</label>
                    <select data="@Model.details.TypeOperation" id="@FieldsListModel.TypeOperation">
                        <option></option>
                        @{
                            var codeIncludedTypeOperation = false;
                            foreach (var item in Model.con.TypeOperation)
                        {
                            <option @if (Model.details.TypeOperation == item.Domainvalue) { <text> selected </text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.TypeOperation == item.Domainvalue){
                                    codeIncludedTypeOperation = true;
                            }
                        }
                            if (codeIncludedTypeOperation == false)
                            {
                                <option selected value="@Model.details.TypeOperation">@Model.details.TypeOperation - Invalid</option>
                            }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Describes access to a roadway. Example: the only way to access the Interstate is by on & off ramps, 
                           so access is fully controlled. Most highways have no control of access because you can access the road by 
                           side streets, driveways, etc… Partial control is when a road is divided and the access points are somewhat controlled.">Access</label>
                    <select data="@Model.details.Access" id="@FieldsListModel.Access">
                        <option></option>
                        @{
                            var codeIncludedAccess = false;
                            foreach (var item in Model.con.Access)
                        {
                            <option @if (Model.details.Access == item.Domainvalue) { <text> selected </text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.Access == item.Domainvalue)
                                {
                                    codeIncludedAccess = true;
                                }
                        }
                            if (codeIncludedAccess == false){
                                <option selected value="@Model.details.Access">@Model.details.Access - invalid</option>
                            }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="If a road is divided then it will have some sort of median otherwise it is not considered a divided roadway. There are several 
                           types of medians. If a median is present, it must be divided and have a median width.">Median <br /> Type</label>
                    <select data="@Model.details.MedianType" id="@FieldsListModel.MedianType">
                        <option></option>
                        @{
                            var codeIncludedMedianType = false;
                            foreach (var item in Model.con.MedianType)
                        {
                    <option @if (Model.details.MedianType == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.MedianType == item.Domainvalue)
                                {
                                    codeIncludedMedianType = true;
                                }
                        }
                            if (codeIncludedMedianType == false)
                            {
                                <option selected value="@Model.details.MedianType">@Model.details.MedianType - invalid</option>
                            }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Gives the width in feet of the median of a divided highway. Median widths can vary from just a few feet to several 
                           hundred feet in width. In the past 999 was used to indicate an unknown median width or a median over 1,000 feet. Most 999’s 
                           represents the unknown value">Median <br /> Width</label>
                    <input data="@Model.details.MedianWidth" id="@FieldsListModel.MedianWidth" type="text" value="@Model.details.MedianWidth" />
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Width of the roadway">
                    Roadway <br /> Width
                    </label>
                    <input data="@Model.details.RoadwayWidth" id="@FieldsListModel.RoadwayWidth" type="text" value="@Model.details.RoadwayWidth" />
                </div>

            </div>
        </div>
        <div id="box-lanes" class="property-box">
            <h6>Lanes</h6>
            <div class="grid-container">
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="In the new system both log and antilog direction are separate records. This field contains the number of lanes for a 
                           divided highway for the particular log direction of the segment. If the sum of the log and antilog direction information is 4 
                           the value for this field will be 2 because each log direction individually has 2 lanes.">One Direction Number of Lanes</label>
                    <input data="@Model.details.OneDirectionNumLanes" id="@FieldsListModel.OneDirectionNumLanes" type="text" value="@Model.details.OneDirectionNumLanes">
                </div>

            </div>
            <div class="grid-container">
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="In the new system both log and antilog direction are separate records. This record reflects the sum of the thru lanes 
                           on both sides of a divided highway. Currently, the number varies from 1 to 8, however, this will increase over time. We don’t 
                           anticipate the number of lanes growing larger than 10 for several years.">Both Directions Number of Lanes</label>
                    <input data="@Model.details.BothDirectionNumLanes" id="@FieldsListModel.BothDirectionNumLanes" type="text" value="@Model.details.BothDirectionNumLanes">
                </div>
            </div>
        </div>
    </div>
    <div class="master-grid">
        <div id="box-system" class='property-box'>
            <h6>System Properties</h6>
            <div class="grid-container">
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Indicates the level of functional classification, codes range from 1 thru 7.">Functional <br /> Class</label>
                    <select data="@Model.details.FuncClass" id="@FieldsListModel.FuncClass">
                        <option></option>
                        @{
                            var codeIncludedFunc = false;
                            foreach (var item in Model.con.FuncClass)
                        {
                        <option @if (Model.details.FuncClass == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if(Model.details.FuncClass == item.Domainvalue)
                                {
                                    codeIncludedFunc = true;
                                }
                    }
                            if (codeIncludedFunc == false)
                            {
                                <option selected value="@Model.details.FuncClass">@Model.details.FuncClass - invalid</option>
                            }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="National Highway System (NHS) is used to designate which records are part of the NHS and determines if it is the standard 
                           NHS route or intermodal connector route.">NHS</label>
                    <select data="@Model.details.Nhs" id="@FieldsListModel.NHS">
                        <option></option>
                        @{
                            var codeIncludedNHS = false;
                            foreach (var item in Model.con.NHS)
                        {
                            <option @if (Model.details.Nhs == item.Domainvalue) { <text> selected </text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                                if (Model.details.Nhs == item.Domainvalue)
                                {
                                    codeIncludedNHS = true;
                                }
                        }
                        if (codeIncludedNHS == false){
                            <option selected value="@Model.details.Nhs">@Model.details.Nhs - Invalid </option>
                        }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Arkansas Primary Highway Network is the state’s way of prioritizing. Funding and other concerns for 
                           the entire state highway system.">APHN<br></label>
                    <select data="@Model.details.Aphn" id="@FieldsListModel.APHN">
                        <option></option>
                        @{
                            var codeIncludesAPHN = false;
                            foreach (var item in Model.con.APHN)
                        {
                            <option @if (Model.details.Aphn == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.Aphn == item.Domainvalue)
                                {
                                    codeIncludesAPHN = true;
                                }
                        }
                        if (codeIncludesAPHN == false){
                            <option selected value="@Model.details.Aphn">@Model.details.Aphn - Invalid </option>
                        }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Indicates which government agency owns the roadway. State, County, City, Forest Service, Air force, etc…">Goverment <br /> Code</label>
                    <select data="@Model.details.GovermentCode" id="@FieldsListModel.GovermentCode">
                        <option></option>
                        @{
                            var codeIncludesGovermentCode = false;
                            foreach (var item in Model.con.GovermentCode)
                        {
                    <option @if (Model.details.GovermentCode == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.GovermentCode == item.Domainvalue)
                            {
                                codeIncludesGovermentCode = true;
                            }            
                        }
                            if (codeIncludesGovermentCode == false)
                            {
                                <option selected value="@Model.details.GovermentCode">@Model.details.GovermentCode - Invalid</option>
                            }
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Some roadways have a special designation; the special system code shows which category of special system the record belongs in.">Special <br /> Systems</label>
                    <select data="@Model.details.SpecialSystems" id="@FieldsListModel.SpecialSystems">
                        <option></option>
                        @{
                            var codeIncludesSpecialSystem = false;
                            foreach (var item in Model.con.SpecialSystems)
                        {
                            <option @if (Model.details.SpecialSystems == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.SpecialSystems == item.Domainvalue)
                                {
                                    codeIncludesSpecialSystem = true;
                                }
                        }
                            if (codeIncludesSpecialSystem == false)
                            {
                                <option selected value="@Model.details.SpecialSystems">@Model.details.SpecialSystems - Invalid</option>
                            } 
                        
                        }
                        
                    </select>
                </div>
                <div>
                    <label data-toggle="tooltip" data-placement="top" title="Indicates if the roadway is open to traffic, built but not open to traffic, or Programmed/projected. This field value does not necessarily 
                           match ARNOLD’s open status. ARNOLD data is updated as soon as it is built or is available to the public. Traffic Information Systems Section does not 
                           update system status until it is officially approved by the Arkansas State Highway Commission.">System <br /> Status</label>
                    <select data="@Model.details.SystemStatus" id="@FieldsListModel.SystemStatus">
                        <option></option>
                        @{
                            var codeIncludesSystemStatus = false;
                            foreach (var item in Model.con.SystemStatus)
                        {
                            <option @if (Model.details.SystemStatus == item.Domainvalue) { <text> selected</text> } value="@item.Domainvalue">@item.Domainvalue - @item.Label</option>
                            if (Model.details.SystemStatus == item.Domainvalue)
                                {
                                    codeIncludesSystemStatus = true;
                                }
                        }
                            if (codeIncludesSystemStatus == false)
                            {
                                <option selected value="@Model.details.SystemStatus">@Model.details.SystemStatus - Invalid</option>
                            }
                        }
                        
                    </select>
                </div>
            </div>
        </div>
        <div id="box-alternate" class='property-box'>
            <h6 data-toggle="tooltip" data-placement="top" title="This field will contain a comma delignated list. Each item in the list will be an alternative route name. This was not done as a separate table to make
                it easier for staff members to query out information.">
                Alternate Route Names
            </h6>
            @if (!(Model.details.AlternativeRouteName is null))
            {
                @if (Model.details.AlternativeRouteName.Contains(";"))
                {
                    @foreach (var item in Model.details.AlternativeRouteName.Split(";"))
                    {
                        <div>
                            <button tabindex="-1" class="alt-route-name-item">-</button><input type="text" value="@item" />
                        </div>
                    }
                }
                else if (Model.details.AlternativeRouteName.Length > 0)
                {
                    <div>
                        <button tabindex="-1" class="alt-route-name-item">-</button><input type="text" value="@Model.details.AlternativeRouteName" />
                    </div>
                }
            }

            <div id="plus-div">
                <button tabindex="-1" id="new-alt-name">+</button>
            </div>
        </div>
    </div>

    <div class="master-grid">
        <div id="box-comments">
            <h6>Comments</h6>
            <textarea data="@Model.details.Comment1" id="@FieldsListModel.Comment1">@Model.details.Comment1</textarea>
        </div>
        <div id="box-dynamic" class='property-box'>
            <h6>Dynamic Fields</h6>
            <p>These Fields Automatically get added to the interface if new fields are added to the roadway inventory database table</p>
        </div>

    </div>

    <div class="grid-container">

        <div>
            <button title="Save changes you have made to the segment" 
                    data-toggle="tooltip" data-placement="bottom" id="save-changes" disabled class="segment-button">Save</button>
        </div>
        <div>
            <button title="Save reset to whatever you have before changes were made" 
                    data-toggle="tooltip" data-placement="bottom" id="reset-changes" class="segment-button" disabled>Reset Changes</button>
        </div>
        <div>
                <button onclick="MicroModal.show('modal-2')" title="create a duplicate of this exact record" 
                        data-toggle="tooltip" data-placement="bottom" class="segment-button"
                        @if (Model.editStatus == SegmentDetailPageModel.duplicateSegment | Model.editStatus == SegmentDetailPageModel.mirrorSegment |
  Model.editStatus == SegmentDetailPageModel.newSegment) { <text> disabled</text>
                        }>
                    Duplicate record
                </button>
        </div>

<div>

<button id="delete-segment" title="Delete this segment permanatly from the database" data-toggle="tooltip" data-placement="bottom" class="segment-button"  
        @if (Model.editStatus == SegmentDetailPageModel.duplicateSegment | Model.editStatus == SegmentDetailPageModel.mirrorSegment |
  Model.editStatus == SegmentDetailPageModel.newSegment)
        {
            <text>disabled</text>
        } >Delete record</button>
        </div>
        <div>
            <button onclick="MicroModal.show('modal-1')" data-toggle="tooltip" data-placement="bottom" 
                    @if (Model.editStatus == SegmentDetailPageModel.duplicateSegment | Model.editStatus == SegmentDetailPageModel.mirrorSegment |
  Model.editStatus == SegmentDetailPageModel.newSegment)
                    {
                <text>disabled</text>
                    } class="segment-button">Mirror Record</button>
        </div>
        <div>
            <a title="New a map of the segment according to the most recent ARNOLD data"  
               data-toggle="tooltip" data-placement="bottom" href="#">View Segment <br> Map</a>
        </div>
        <div>
            <button data-toggle="tooltip" data-placement="bottom" 
                    title="disables validation error handeling. Please only use in rare and nuanced situations" id="manual-override" class="segment-button">
                Manual Override
            </button>
        </div>
    </div>

</div>



<script>
    /*
     * There is a jquery tooltip plugin that is used to get all of the 
     * explanatory tooltips for each of the fields. The method can't be called until the entire web document is rendered to the browser.
     * If its called before then, the tooptips will not work. The script will try to add toolips to HTML elements that do not exist yet.
     * */
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
            });
</script>

<script>
    /*
     I wanted each of the "Field" names or attribute names in both C-sharp and javascript to be the same. its really easy to misspell an attribute name
     in javascript. If the backend and frontend names do not match correctly it will not necessarily show in a runtime error. It might end up becomeing
     some kind of semantic error caused by a null or missing value. In order to avoid this the FieldsListModel class is used to hold common the attribute names
     */

    /*List of attributes that will be requested from the backend, and submitted to the backend for validation*/
    var subjectAttributes = ["@FieldsListModel.AH_District", "@FieldsListModel.AH_County", "@FieldsListModel.AH_Section", "@FieldsListModel.AH_Route",
        "@FieldsListModel.AH_Section", "@FieldsListModel.LOG_DIRECT", "@FieldsListModel.AH_BLM", "@FieldsListModel.AH_ELM", "@FieldsListModel.RouteSign",
            "@FieldsListModel.TypeRoad", "@FieldsListModel.RuralUrbanArea", "@FieldsListModel.UrbanAreaCode", "@FieldsListModel.LeftShoulderWidth",
            "@FieldsListModel.LeftShoulderSurface", "@FieldsListModel.RightShoulderWidth", "@FieldsListModel.RightShoulderSurface",
            "@FieldsListModel.SurfaceType", "@FieldsListModel.TypeOperation", "@FieldsListModel.LaneWidth", "@FieldsListModel.ExtraLanes",
        "@FieldsListModel.SurfaceWidth", "@FieldsListModel.Access", "@FieldsListModel.MedianType", "@FieldsListModel.MedianWidth",
        "@FieldsListModel.OneDirectionNumLanes", "@FieldsListModel.BothDirectionNumLanes", "@FieldsListModel.FuncClass", "@FieldsListModel.NHS",
        "@FieldsListModel.APHN", "@FieldsListModel.GovermentCode", "@FieldsListModel.SpecialSystems", "@FieldsListModel.SystemStatus",
        "@FieldsListModel.RoadwayWidth", "@FieldsListModel.Comment1", "@FieldsListModel.YearBuilt", "@FieldsListModel.yearRecon", "@FieldsListModel.ID",
        "@FieldsListModel.Alternative_Route_Name"];

    /*The gatherInput method simply looks gathers user input values from every single dropbox box, textbox or other input. 
     This method is used by a variety of different other functions which need information about what different fields are but
     each of the other function does not need to know how to fetch each individual attribute.

    this loops over the subjectAttributes object so it makes it really easy to add more fields to the gathering process

     */
    function gatherInput() {
        inputs = {};

        var i;
        for (i = 0; i < subjectAttributes.length; i++) {
            var raw = $("#" + subjectAttributes[i]).val();
            inputs[subjectAttributes[i]] = raw;
        }

        inputs["ID"] = @Model.details.Id;//record id

        var altNames = $("#box-alternate div input").map((_, el) => el.value).get();//get alternative names into a list
        console.log(altNames);
        inputs["@FieldsListModel.Alternative_Route_Name"] = "";

        //construct the alternative route names list into a string
        if (altNames.length > 0) {
            var i;
            for (i = 0; i < altNames.length; i++) {
                if (altNames[i] != "" && altNames[i] != undefined) {
                    if (i === 0) {
                        inputs["@FieldsListModel.Alternative_Route_Name"] = altNames[i].trim();
                    } else {
                        inputs["@FieldsListModel.Alternative_Route_Name"] = inputs["@FieldsListModel.Alternative_Route_Name"] + ";" + altNames[i].trim();
                    }
                }
            }
        }

        return inputs;
    }

    //trigger submitInputs whenever, the user changes an input or presses a key. part of event loop to get validation triggered in the interface.
    $("input, select, textarea").on("keyup, change", submitInputs);


    //General function to check to see if the inputs are valid and change the disabled state of some editing buttons
    function submitInputs() {
        console.log("SubmitInputs");
        var inputs = gatherInput();

        $.post("api/validate", inputs, errorPost, "json");

        //find the original input values from when the page was loaded or the last time the record was saved and check to see if anything changed
        $("#save-changes, #reset-changes").attr("disabled", "");
        subjectAttributes.forEach(function (x) {
            if (originalValues[x] == inputs[x]) {
                //do nothing
            } else {
                $("#save-changes, #reset-changes").removeAttr("disabled");
            }
        });
    }

    //apply tag class error-flag to everything that has an error associated with it.
    //method is called after validate results have been returned from the backend server
    function errorPost(data) {
        //if the manual override is off, apply the errors according
        if (!$("#manual-override").hasClass("override-active")) {
            console.log(data);
            //zero out all attributes errors
            $(".error-flag")
                .removeAttr("title")
                .tooltip('disable');

            //apply error to relivant parts
            for (i = 0; i < subjectAttributes.length; i++) {
                var raw = $("#" + subjectAttributes[i]).removeClass("error-flag");
            }
            data.forEach(function (item) {
                item.fields.forEach(function (field) {
                    console.log(item);
                    $("#" + field)
                        .addClass("error-flag")
                        .attr("title", item.errorMessageLong)
                        .attr("data-placement", "bottom")
                        .tooltip('enable');
                });

            });

            //change style of save change button if there area errors
            if (data.length > 0) {
                $("#save-changes").addClass("override-active").text("Can't Save, Errors");
            } else {
                $("#save-changes").removeClass("override-active").text("Save");
            }

        } else {
            //if the manual override is off, get rid of all the error flags
            $("#save-changes").removeClass("override-active").text("Save");
            subjectAttributes.forEach(function (item) {
                $("#" + item)
                    .removeClass("error-flag")
                    .removeAttr("title")
                    .removeAttr("data-placement")
                    .tooltip("disable");
            });
        }
    }


    //submit button click so save the changes
    $("#save-changes").click(function () {
        var inputs = gatherInput();
        $("#save-changes").fadeOut();

        var newRecord = "@Model.editStatus";

        if ("@Model.editStatus" == "@SegmentDetailPageModel.newSegment") {
            $.post("api/new_Segment", inputs, function (data) {
                console.log("new results have been saved");
                console.log(data);
                originalValues = gatherInput();//update static values used to determine if changes have been made
                $("#save-changes").text("Changes saved!").fadeIn(1000, function () {
                    $("#save-changes").text("Save");
                    window.location.href = "edit_Segment.html?ID=" + String(data);
                });
            });
        } else {
            $.post("api/update", inputs, function (data) {
                console.log("results have been saved");
                console.log(data);
                originalValues = gatherInput();//update values used to determine if changes have been made
                $("#save-changes").text("Changes saved!").fadeIn(1000, function () {
                    $("#save-changes").text("Save");
                });
            });
        }


    });



    //contrain these corrections to Manual Override mode on
    //make sure BLM and ELM always have 3 digit
    $("#@FieldsListModel.AH_BLM").focusout(function () {
        if (!$("#manual-override").hasClass("override-active")) {
            //force BLM and ELM to be three decimal places
            var BLM = $("#@FieldsListModel.AH_BLM").val();
            if (!isNaN(BLM) && BLM != "" && BLM != null && BLM != undefined) {
                console.log(BLM);
                BLM = parseFloat(BLM).toFixed(3);
                $("#@FieldsListModel.AH_BLM").val(BLM);
            }
        }

    });

    $("#@FieldsListModel.AH_ELM").focusout(function () {
        if(!$("#manual-override").hasClass("override-active")){
            //force BLM and ELM to be three decimal places
            var ELM = $("#@FieldsListModel.AH_ELM").val();
            if (!isNaN(ELM) && ELM != "" && ELM != null && ELM != undefined) {
                //console.log(ELM);
                ELM = parseFloat(ELM).toFixed(3);
                $("#@FieldsListModel.AH_ELM").val(ELM);
            }
        }

    });

    //change the read only length field accordingly
    $("#@FieldsListModel.AH_ELM, #@FieldsListModel.AH_BLM").focusout(function () {
        var length = $("#@FieldsListModel.AH_ELM").val() - $("#@FieldsListModel.AH_BLM").val();
        length = parseFloat(length).toFixed(3)
        console.log("New Length!");
        console.log(length);
        $("#@FieldsListModel.AH_Length").html(length);
    });


    //change the record title if the inputs fields for BLM and ELM change
    $("#@FieldsListModel.AH_ELM, #@FieldsListModel.AH_BLM").change(function () {
        console.log("ELM and BLM changing")
        $("#m-@FieldsListModel.AH_ELM, #d-@FieldsListModel.AH_ELM").val( $("#@FieldsListModel.AH_ELM").val() );
        $("#m-@FieldsListModel.AH_BLM, #d-@FieldsListModel.AH_BLM").val( $("#@FieldsListModel.AH_BLM").val() );
    });


    //change the section code label when section field changes
    $("#@FieldsListModel.AH_Section").focusout(function () {
        var sectionCodeList = @Html.Raw(Model.sectionCodeJson);
        var currentSection = $("#@FieldsListModel.AH_Section").val();
        $("#@FieldsListModel.SectionCode")
            .html("None")
            .removeAttr("title");

        sectionCodeList.forEach(function (x) {
            if (currentSection.toUpperCase().includes(x.SectionCode)) {
                $("#@FieldsListModel.SectionCode")
                    .html(x.Name)
                    .attr("title", x.Description)
                    .tooltip();
            }
        });

    });

    //force AH_Section to upper case after being edited
    $("#@FieldsListModel.AH_Route").focusout(function () {
        if (!$("#manual-override").hasClass("override-active")) {
            var routeString = $("#@FieldsListModel.AH_Route")
                .val()
                .toUpperCase();

            $("#@FieldsListModel.AH_Route").val(routeString);
        }

    });

    //force AH_Section to upper case after being edited
    $("#@FieldsListModel.AH_Section").focusout(function () {
        if (! $("#manual-override").hasClass("override-active")) {
            var sectionString = $("#@FieldsListModel.AH_Section")
                .val()
                .toUpperCase();

            $("#@FieldsListModel.AH_Section").val(sectionString);
        }


    });

    //force title to change its road id and logmiles accordingly
    $("#@FieldsListModel.AH_County, #@FieldsListModel.AH_Route, #@FieldsListModel.AH_Section, #@FieldsListModel.LOG_DIRECT")
        .on("keyup change" ,function () {
            var county = $("#@FieldsListModel.AH_County").val();
            var section = $("#@FieldsListModel.AH_Section").val();
            var route = $("#@FieldsListModel.AH_Route").val();
            var direction = $("#@FieldsListModel.LOG_DIRECT").val();
            var roadid = county + "x" + route + "x" + section + "x" + direction;

            console.log("New RoadID " + roadid);

            $(".@FieldsListModel.AH_RoadID").text(roadid);
            $(".@FieldsListModel.AH_BLM").text($("#@FieldsListModel.AH_BLM").val());
            $(".@FieldsListModel.AH_ELM").text($("#@FieldsListModel.AH_ELM").val());

            $("#d-@FieldsListModel.AH_County, #m-@FieldsListModel.AH_County ").val(county);
            $("#d-@FieldsListModel.AH_Route, #m-@FieldsListModel.AH_Route ").val(route);
            $("#d-@FieldsListModel.AH_Section, #m-@FieldsListModel.AH_Section ").val(section);


            $("#d-@FieldsListModel.LOG_DIRECT").val(direction);
            if (direction == "A") {
                var opposite = "B";
            } else {
                var opposite = "A"
            }
            $("#m-@FieldsListModel.LOG_DIRECT").text(opposite)
    });


    //allow enable and disable of manual override
    $("#manual-override").click(function () {
        var button = $("#manual-override");

        if (button.hasClass("override-active")) {
            button.removeClass("override-active");
            submitInputs();
        } else {
            button.addClass("override-active");
            submitInputs();
        }
    });

    //Need to gather inputs the first time directly from the database to avoid keeping saved attributes
    //do not use gatherInput() function because it will modify the values a bit as its imported.

    var originalValues = {
        "@FieldsListModel.AH_District": "@Model.details.AhDistrict",
        "@FieldsListModel.AH_County": "@Model.details.AhCounty",
        "@FieldsListModel.AH_Section": "@Model.details.AhSection",
        "@FieldsListModel.AH_Route": "@Model.details.AhRoute",
        "@FieldsListModel.AH_Section": "@Model.details.AhSection",
        "@FieldsListModel.LOG_DIRECT": "@Model.details.LogDirect",
        "@FieldsListModel.AH_BLM":  @Model.details.AhBlm ,
        "@FieldsListModel.AH_ELM":  @Model.details.AhElm ,
        "@FieldsListModel.RouteSign": "@Model.details.RouteSign",
        "@FieldsListModel.TypeRoad" : "@Model.details.TypeRoad",
        "@FieldsListModel.RuralUrbanArea": "@Model.details.RuralUrbanArea",
        "@FieldsListModel.UrbanAreaCode": "@Model.details.UrbanAreaCode",
    "@FieldsListModel.LeftShoulderWidth": @{
        if (Model.details.LeftShoulderWidth is null)
        {
            <text>""</text>
        }
        else {<text>@Model.details.LeftShoulderWidth </text>} 
    },
        "@FieldsListModel.LeftShoulderSurface": "@Model.details.LeftShoulderSurface",
    "@FieldsListModel.RightShoulderWidth": @{
        if (Model.details.LeftShoulderWidth is null) 
        { 
            <text>""</text> 
        } else {<text>@Model.details.RightShoulderWidth</text>}
    } ,
        "@FieldsListModel.RightShoulderSurface": "@Model.details.RightShoulderSurface",
        "@FieldsListModel.SurfaceType": "@Model.details.SurfaceType",
        "@FieldsListModel.TypeOperation": "@Model.details.TypeOperation",
        "@FieldsListModel.LaneWidth": @{
        if (Model.details.LaneWidth is null)
        {
            <text>""</text>
        } else {<text>@Model.details.LaneWidth</text>}
        },
        "@FieldsListModel.ExtraLanes": "@Model.details.ExtraLanes",
    "@FieldsListModel.SurfaceWidth": @if (Model.details.SurfaceWidth is null){
        <text>""</text>
    } else {<text>@Model.details.SurfaceWidth</text>
    },
        "@FieldsListModel.Access": "@Model.details.Access",
        "@FieldsListModel.MedianType": "@Model.details.MedianType",
        "@FieldsListModel.MedianWidth": "@Model.details.MedianWidth",
        "@FieldsListModel.OneDirectionNumLanes": "@Model.details.OneDirectionNumLanes",
        "@FieldsListModel.BothDirectionNumLanes": "@Model.details.BothDirectionNumLanes",
        "@FieldsListModel.FuncClass": "@Model.details.FuncClass",
        "@FieldsListModel.NHS": "@Model.details.Nhs",
        "@FieldsListModel.APHN": "@Model.details.Aphn",
        "@FieldsListModel.GovermentCode": "@Model.details.GovermentCode",
        "@FieldsListModel.SpecialSystems": "@Model.details.SpecialSystems",
        "@FieldsListModel.SystemStatus": "@Model.details.SystemStatus",
    "@FieldsListModel.RoadwayWidth": @{
        if (Model.details.RoadwayWidth is null) 
    { 
        <text>""</text> 
    } else 
        {<text>@Model.details.RoadwayWidth</text>}} ,
        "@FieldsListModel.Comment1": "@Model.details.Comment1",
        "@FieldsListModel.ID": "@Model.details.Id",
        "@FieldsListModel.Alternative_Route_Name": "@Model.details.AlternativeRouteName"
    };

    //cooresponds to the rerest change button
    $("#reset-changes").click(function () {
        //reset values in the main form
        subjectAttributes.forEach(function (x) {
            $("#" + x).val(originalValues[x]);

        //reset values in the modal windows
        $("#m-@FieldsListModel.AH_ELM, #d-@FieldsListModel.AH_ELM").val( $("#@FieldsListModel.AH_ELM").val());
        $("#m-@FieldsListModel.AH_BLM, #d-@FieldsListModel.AH_BLM").val( $("#@FieldsListModel.AH_BLM").val());
        });

        $("#d-@FieldsListModel.AH_County, #m-@FieldsListModel.AH_County ").val(originalValues["@FieldsListModel.AH_County"]);
        $("#d-@FieldsListModel.AH_Route, #m-@FieldsListModel.AH_Route ").val(originalValues["@FieldsListModel.AH_Route"]);
        $("#d-@FieldsListModel.AH_Section, #m-@FieldsListModel.AH_Section ").val(originalValues["@FieldsListModel.AH_Section"]);
        $("#d-@FieldsListModel.LOG_DIRECT").val(originalValues["@FieldsListModel.LOG_DIRECT"]);

        var direction = $("#@FieldsListModel.LOG_DIRECT").val();
        if (direction == "A") {
            var opposite = "B";
        } else {
            var opposite = "A"
        }
        $("#m-@FieldsListModel.LOG_DIRECT").text(opposite);
        $("#save-changes").attr("disabled", "");
        $("#reset-changes").attr("disabled", "");

    });

    //logic to delete segment button
    $("#delete-segment").click(function () {
        //submit id to be deleted
        //show a confirmation page
        //re-direct user to homepage

        $.post("api/delete", { ID : @Model.details.Id } , function (data) {
            MicroModal.show("modal-delete");
            function sleep(time) {
                return new Promise((resolve) => setTimeout(resolve, time));
            }
            //wait roughly 2 seconds before redirecting the page
            sleep(2000).then(() => {
                window.location.href = "/index.html";
            });
        }, "json");
    });

    //logic to duplicate segment button
    $("#continue-duplicate").click(function () {
        var AH_County = $("#d-@FieldsListModel.AH_County").val();
        var AH_Route = $("#d-@FieldsListModel.AH_Route").val();
        var AH_Section = $("#d-@FieldsListModel.AH_Section").val();
        var direction = $("#d-@FieldsListModel.LOG_DIRECT").val();
        var AH_BLM = $("#d-@FieldsListModel.AH_BLM").val();
        var AH_ELM = $("#d-@FieldsListModel.AH_ELM").val();

        var parameters = {};
        parameters["@FieldsListModel.ID"] = @Model.details.Id;
        parameters["@FieldsListModel.AH_County"] = AH_County;
        parameters["@FieldsListModel.AH_Route"] = AH_Route;
        parameters["@FieldsListModel.AH_Section"] = AH_Section;
        parameters["@FieldsListModel.LOG_DIRECT"] = direction;
        parameters["@FieldsListModel.AH_BLM"] = AH_BLM;
        parameters["@FieldsListModel.AH_ELM"] = AH_ELM;

        $.post("api/dup_Segment", parameters, function (data) {
            MicroModal.close("modal-2");
            window.location.href = "edit_Segment?ID=" + String(data);
        });

    });

    //logic to mirror segment button
    $("#continue-mirror").click(function () {
        var AH_County = $("#m-@FieldsListModel.AH_County").val();
        var AH_Route = $("#m-@FieldsListModel.AH_Route").val();
        var AH_Section = $("#m-@FieldsListModel.AH_Section").val();
        var direction = $("#m-@FieldsListModel.LOG_DIRECT").val();
        var AH_BLM = $("#m-@FieldsListModel.AH_BLM").val();
        var AH_ELM = $("#m-@FieldsListModel.AH_ELM").val();

        var parameters = {};
        parameters["@FieldsListModel.ID"] = @Model.details.Id;
        parameters["@FieldsListModel.AH_County"] = AH_County;
        parameters["@FieldsListModel.AH_Route"] = AH_Route;
        parameters["@FieldsListModel.AH_Section"] = AH_Section;
        parameters["@FieldsListModel.LOG_DIRECT"] = direction;
        parameters["@FieldsListModel.AH_BLM"] = AH_BLM;
        parameters["@FieldsListModel.AH_ELM"] = AH_ELM;

        console.log(parameters);

        $.post("api/mirror_Segment", parameters, function (data) {
            MicroModal.close("modal-1");
            window.location.href = "edit_Segment?ID=" + String(data);
        });

    });

    //deal with changes in alternate route name to add a route route name
    $("#new-alt-name").click(function () {
        //add new items to its siblings
        var newElementText = '<div><button class="alt-route-name-item">-</button><input type="text" /></div>';
        $(newElementText).insertBefore("#plus-div");

        //rebind every time elements are added
        $(".alt-route-name-item").click(function () {
            $(this).parent().remove();
        });

        $("#box-alternate div input").on("keyup, change", submitInputs);//submit element for validation every time its the user presses a key in the alternative route name text box.

    });

    //rebind every time elements are added
    $(".alt-route-name-item").click(function () {
        $(this).parent().remove();
    });
    $("#box-alternate div input").on("keyup, change", submitInputs);

    //navigate to record before current record
    $("#left-arrow").click(function () {
        var inputs = { "sourceSegmentID" : "@Model.details.Id"};
        $.post("api/segmentOrder", inputs, function (data) {
            if (data.beforeid == -1) {
                alert("There is no next id");
            } else {
                window.location.href = "/edit_Segment.html?id=" + data.beforeid;
            }

        }, "json");

    });

    //navigate to record after current record
    $("#right-arrow").click(function () {
        var inputs = { "sourceSegmentID": "@Model.details.Id" };
        $.post("api/segmentOrder", inputs, function (data) {

            if (data.afterid == -1) {
                alert("there is no after id");
            } else {
                window.location.href = "/edit_Segment.html?id=" + data.afterid;
            }

        }, "json");
    });


    //run validation on all data after its been loaded even if its in the database
    submitInputs();

</script>